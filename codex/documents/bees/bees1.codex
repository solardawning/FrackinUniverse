{
  "id" : "bees1",
  "title" : "Bee Genomes",
  "description" : "How to read genomes",
  "icon" : "beecodex.png",
  "contentPages" : ["^orange;Genomes^reset;\n
A string composed of numbers and chars similar to how hexidecimals work, but goes up to Z instead of F (0-35 instead of 0-15 | 0-1295 instead of 0-255 with two characters)\n
A genome is composed of (number of stats * 2) characters, where every two characters store the value of a stat. Each such pair is called a gene. The way a stat is translated from stat to string varies, but here's the general idea:\n
value * 100 -> char (0 = 00, 12.95 = ZZ, 2 = 5J)\n
A complete genome with the present stats would look like this:\n
baseProduction : 3, droneToughness : 1, droneMultiplier : 1, queenLifespan : 5, queenHealth : 3, mutationChance : 1 (out of 100)\n
Final Genome: 30101050301",

"^orange;Stats^reset;\n
	subtype : Used to identify the subtype of the bee. Set up production pools and unique behaviors using this.
	baseProduction : Base drone production at 100% hive efficiency
	droneToughness : Number of mites required to kill a drone. Also used in bee on bee fights
	droneBreedRate : Base drone breeding rate
	queenBreedRate : Base queen breeding rate
	queenLifespan : How many bee production ticks before the queen dies (up to 1295)
	mutationChance : Chance for a drastic mutation to occur
	miteResistance : Mite birth rate modifier ('ZZ': 64.7, 'HZ': 0, '00': -64.7, value:modifier)
	workTime : Diurnal('0'), nocturnal('1'), or both('2')

	Mutation chance jumps by (math.floor(100/1295*100*n)*0.01) each increment
	'00' : 0 | '01' : 0.07 | 'HZ' : 49.96 | 'ZZ' : 100"  
  ],
   "longContentPages" : [ "^orange;Genomes^reset;\n
A string composed of numbers and chars similar to how hexidecimals work, but goes up to Z instead of F (0-35 instead of 0-15 | 0-1295 instead of 0-255 with two characters)\n
A genome is composed of (number of stats * 2) characters, where every two characters store the value of a stat. Each such pair is called a gene. The way a stat is translated from stat to string varies, but here's the general idea:\n
value * 100 -> char (0 = 00, 12.95 = ZZ, 2 = 5J)\n
A complete genome with the present stats would look like this:\n
baseProduction : 3, droneToughness : 1, droneMultiplier : 1, queenLifespan : 5, queenHealth : 3, mutationChance : 1 (out of 100)\n
Final Genome: 30101050301\n\n

^orange;Stats^reset;\n
	subtype : Used to identify the subtype of the bee. Set up production pools and unique behaviors using this.
	baseProduction : Base drone production at 100% hive efficiency
	droneToughness : Number of mites required to kill a drone. Also used in bee on bee fights
	droneBreedRate : Base drone breeding rate
	queenBreedRate : Base queen breeding rate
	queenLifespan : How many bee production ticks before the queen dies (up to 1295)
	mutationChance : Chance for a drastic mutation to occur
	miteResistance : Mite birth rate modifier ('ZZ': 64.7, 'HZ': 0, '00': -64.7, value:modifier)
	workTime : Diurnal('0'), nocturnal('1'), or both('2')

	Mutation chance jumps by (math.floor(100/1295*100*n)*0.01) each increment
	'00' : 0 | '01' : 0.07 | 'HZ' : 49.96 | 'ZZ' : 100
"  
   ],
   
    "itemConfig" : {
    "rarity" : "uncommon",
    "price" : 0
  }
}
